// Code generated by Microsoft (R) AutoRest Code Generator 0.9.7.0
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

using System;
using Newtonsoft.Json.Linq;

namespace BGuest.Integration.Api.Client.Models
{
    public partial class StayReservationDto
    {
        private bool? _allowExpressCheckout;
        
        /// <summary>
        /// Optional. True if the guest is allowed to perform express checkout
        /// (not used at this time)
        /// </summary>
        public bool? AllowExpressCheckout
        {
            get { return this._allowExpressCheckout; }
            set { this._allowExpressCheckout = value; }
        }
        
        private string _currentBillCurrency;
        
        /// <summary>
        /// Optional. Current bill value currency (not used at this time)
        /// </summary>
        public string CurrentBillCurrency
        {
            get { return this._currentBillCurrency; }
            set { this._currentBillCurrency = value; }
        }
        
        private DateTimeOffset? _currentBillDate;
        
        /// <summary>
        /// Optional. Date when the current bill value was last updated (not
        /// used at this time)
        /// </summary>
        public DateTimeOffset? CurrentBillDate
        {
            get { return this._currentBillDate; }
            set { this._currentBillDate = value; }
        }
        
        private double? _currentBillValue;
        
        /// <summary>
        /// Optional. Current bill value (not used at this time)
        /// </summary>
        public double? CurrentBillValue
        {
            get { return this._currentBillValue; }
            set { this._currentBillValue = value; }
        }
        
        private string _externalKey;
        
        /// <summary>
        /// Optional. External key for this reservation/stay as imported
        /// </summary>
        public string ExternalKey
        {
            get { return this._externalKey; }
            set { this._externalKey = value; }
        }
        
        private GuestDto _guest;
        
        /// <summary>
        /// Optional. Guest info
        /// </summary>
        public GuestDto Guest
        {
            get { return this._guest; }
            set { this._guest = value; }
        }
        
        private int? _id;
        
        /// <summary>
        /// Optional. Reservation id
        /// </summary>
        public int? ID
        {
            get { return this._id; }
            set { this._id = value; }
        }
        
        private bool _isBreakfastIncluded;
        
        /// <summary>
        /// Required. Indicated if the breakfast is included on the stay
        /// </summary>
        public bool IsBreakfastIncluded
        {
            get { return this._isBreakfastIncluded; }
            set { this._isBreakfastIncluded = value; }
        }
        
        private bool _isCheckedIn;
        
        /// <summary>
        /// Required. If true the guest is checked in
        /// </summary>
        public bool IsCheckedIn
        {
            get { return this._isCheckedIn; }
            set { this._isCheckedIn = value; }
        }
        
        private bool? _isImported;
        
        /// <summary>
        /// Optional. True if stay/reservation was imported into bguest
        /// </summary>
        public bool? IsImported
        {
            get { return this._isImported; }
            set { this._isImported = value; }
        }
        
        private DateTimeOffset? _periodEnd;
        
        /// <summary>
        /// Optional. Stay period end date
        /// </summary>
        public DateTimeOffset? PeriodEnd
        {
            get { return this._periodEnd; }
            set { this._periodEnd = value; }
        }
        
        private DateTimeOffset? _periodStart;
        
        /// <summary>
        /// Optional. Stay period start date
        /// </summary>
        public DateTimeOffset? PeriodStart
        {
            get { return this._periodStart; }
            set { this._periodStart = value; }
        }
        
        private string _reservation;
        
        /// <summary>
        /// Optional. Reservation code
        /// </summary>
        public string Reservation
        {
            get { return this._reservation; }
            set { this._reservation = value; }
        }
        
        private string _reservationGuestEmail;
        
        /// <summary>
        /// Optional. Guest email address as stated on the imported
        /// reservation/stay
        /// </summary>
        public string ReservationGuestEmail
        {
            get { return this._reservationGuestEmail; }
            set { this._reservationGuestEmail = value; }
        }
        
        private string _room;
        
        /// <summary>
        /// Optional. Room number
        /// </summary>
        public string Room
        {
            get { return this._room; }
            set { this._room = value; }
        }

        private StayStates _state;
        /// <summary>
        /// Current Stay / reservation state. 
        /// Possible values are Active or Removed.
        /// </summary>
        public StayStates State
        {
            get { return this._state; }
            set { this._state = value; }
        }

        /// <summary>
        /// Initializes a new instance of the StayReservationDto class.
        /// </summary>
        public StayReservationDto()
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the StayReservationDto class with
        /// required arguments.
        /// </summary>
        public StayReservationDto(bool isCheckedIn, bool isBreakfastIncluded)
            : this()
        {
            this.IsCheckedIn = isCheckedIn;
            this.IsBreakfastIncluded = isBreakfastIncluded;
        }
        
        /// <summary>
        /// Deserialize the object
        /// </summary>
        public virtual void DeserializeJson(JToken inputObject)
        {
            if (inputObject != null && inputObject.Type != JTokenType.Null)
            {
                JToken allowExpressCheckoutValue = inputObject["allowExpressCheckout"];
                if (allowExpressCheckoutValue != null && allowExpressCheckoutValue.Type != JTokenType.Null)
                {
                    this.AllowExpressCheckout = ((bool)allowExpressCheckoutValue);
                }
                JToken currentBillCurrencyValue = inputObject["currentBillCurrency"];
                if (currentBillCurrencyValue != null && currentBillCurrencyValue.Type != JTokenType.Null)
                {
                    this.CurrentBillCurrency = ((string)currentBillCurrencyValue);
                }
                JToken currentBillDateValue = inputObject["currentBillDate"];
                if (currentBillDateValue != null && currentBillDateValue.Type != JTokenType.Null)
                {
                    this.CurrentBillDate = ((DateTimeOffset)currentBillDateValue);
                }
                JToken currentBillValueValue = inputObject["currentBillValue"];
                if (currentBillValueValue != null && currentBillValueValue.Type != JTokenType.Null)
                {
                    this.CurrentBillValue = ((double)currentBillValueValue);
                }
                JToken externalKeyValue = inputObject["externalKey"];
                if (externalKeyValue != null && externalKeyValue.Type != JTokenType.Null)
                {
                    this.ExternalKey = ((string)externalKeyValue);
                }
                JToken guestValue = inputObject["guest"];
                if (guestValue != null && guestValue.Type != JTokenType.Null)
                {
                    GuestDto guestDto = new GuestDto();
                    guestDto.DeserializeJson(guestValue);
                    this.Guest = guestDto;
                }
                JToken idValue = inputObject["id"];
                if (idValue != null && idValue.Type != JTokenType.Null)
                {
                    this.ID = ((int)idValue);
                }
                JToken isBreakfastIncludedValue = inputObject["isBreakfastIncluded"];
                if (isBreakfastIncludedValue != null && isBreakfastIncludedValue.Type != JTokenType.Null)
                {
                    this.IsBreakfastIncluded = ((bool)isBreakfastIncludedValue);
                }
                JToken isCheckedInValue = inputObject["isCheckedIn"];
                if (isCheckedInValue != null && isCheckedInValue.Type != JTokenType.Null)
                {
                    this.IsCheckedIn = ((bool)isCheckedInValue);
                }
                JToken isImportedValue = inputObject["isImported"];
                if (isImportedValue != null && isImportedValue.Type != JTokenType.Null)
                {
                    this.IsImported = ((bool)isImportedValue);
                }
                JToken periodEndValue = inputObject["periodEnd"];
                if (periodEndValue != null && periodEndValue.Type != JTokenType.Null)
                {
                    this.PeriodEnd = ((DateTimeOffset)periodEndValue);
                }
                JToken periodStartValue = inputObject["periodStart"];
                if (periodStartValue != null && periodStartValue.Type != JTokenType.Null)
                {
                    this.PeriodStart = ((DateTimeOffset)periodStartValue);
                }
                JToken reservationValue = inputObject["reservation"];
                if (reservationValue != null && reservationValue.Type != JTokenType.Null)
                {
                    this.Reservation = ((string)reservationValue);
                }
                JToken reservationGuestEmailValue = inputObject["reservationGuestEmail"];
                if (reservationGuestEmailValue != null && reservationGuestEmailValue.Type != JTokenType.Null)
                {
                    this.ReservationGuestEmail = ((string)reservationGuestEmailValue);
                }
                JToken roomValue = inputObject["room"];
                if (roomValue != null && roomValue.Type != JTokenType.Null)
                {
                    this.Room = ((string)roomValue);
                }
            }
        }
    }
}
